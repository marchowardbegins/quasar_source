# coding=utf-8

"""
This module, problem_011.py, solves the twelth project euler problem.
"""

from project_euler_problems.problem import Problem
import math

'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''


class ImplementedProblem(Problem):
	"""This specific problem's implementation.
	"""

	# from : https: // codereview.stackexchange.com / questions / 83579 / project - euler - problem - 12 - in -python
	def divisors(self, n):
		number_of_factors = 0
		for i in range(1, int(math.ceil(math.sqrt(n))) + 1):
			if n % i == 0:
				number_of_factors += 2
			if i * i == n:
				number_of_factors -= 1
		return number_of_factors

	def get_solution(self):
		"""Solves the solution for problem 012.
		:return: The solution for problem 012.
		"""
		current_triangle_number = 1
		current_triangle_sum = 1
		most_factors = 0
		keep_going = True

		while keep_going:
			current_triangle_number += 1
			current_triangle_sum += current_triangle_number
			number_of_factors = self.divisors(current_triangle_sum)
			#print(str(current_triangle_number) + '\t' + str(number_of_factors))
			if number_of_factors > most_factors:
				print(str(current_triangle_number) + '\t' + str(number_of_factors))
				most_factors = number_of_factors
			if number_of_factors > 500:
				return current_triangle_sum
		return -1
