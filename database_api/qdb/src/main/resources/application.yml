###
#   Database Settings
###
spring:
  profiles:
    active: ${SPRING_ACTIVE_PROFILES:prod}
  main:
    web-environment: false
  data:
    mongodb:
      host: ${MONGODB_HOST}
      port: ${MONGODB_PORT}
      database: ${ADMIN_SERVICE_MONGODB_DB:adminServiceDb}
      authenticationDatabase: ${MONGODB_AUTHDB:admin}
      username: ${MONGODB_USERNAME:quasarroot}
      password: ${MONGODB_PASSWORD:Quasar4321!}

# SSL
trust:
  filePath: /etc/certs
  fileName: ${TRUST_FILE_NAME:truststore.ks}
  filePassword: ${TRUST_FILE_PASSWORD:changeit}

##Query Service
queryservice:
  scheme: ${QUERYSERVICE_SCHEME:https}
  host: ${QUERYSERVICE_HOST}
  port: ${QUERYSERVICE_PORT}
  context-path: /query-service/v1
  profiles:
    base: /profiles
    baseUrl: ${PROFILES_SERVICE_BASE_URL:http://query-service:8080/query-service/v1/profiles}
  extensions:
    base: /phoneextensions
    baseUrl: ${PROFILES_SERVICE_BASE_URL:http://query-service:8080/query-service/v1/phoneextensions}

##Kafka
kafka:
  host: ${KAFKA_HOST}
  port: ${KAFKA_PORT}
  # Used for an out of memory experiment
  replytopics:
    profilereply:
      receiveTopic: 
        value:      ${KAFKA_TOPIC_PROFILEREPLY_RECEIVETOPIC:profileReplyReceive}
        partitions: ${KAFKA_TOPIC_PROFILEREPLY_RECEIVETOPIC_P:1}
        replicas:   ${KAFKA_TOPIC_PROFILEREPLY_RECEIVETOPIC_R:1} 
      sendTopic: 
        value:      ${KAFKA_TOPIC_PROFILEREPLY_SENDTOPIC:profileReplySend}
        partitions: ${KAFKA_TOPIC_PROFILEREPLY_SENDTOPIC_P:1}
        replicas:   ${KAFKA_TOPIC_PROFILEREPLY_SENDTOPIC_R:1}
    phonereply:
      receiveTopic:
        value:      ${KAFKA_TOPIC_PHONEREPLY_RECEIVETOPIC:phoneReplyReceive}
        partitions: ${KAFKA_TOPIC_PHONEREPLY_RECEIVETOPIC_P:1}
        replicas:   ${KAFKA_TOPIC_PHONEREPLY_RECEIVETOPIC_R:1}
      sendTopic:
        value:      ${KAFKA_TOPIC_PHONEREPLY_SENDTOPIC:phoneReplySend}
        partitions: ${KAFKA_TOPIC_PHONEREPLY_SENDTOPIC_P:1}
        replicas:   ${KAFKA_TOPIC_PHONEREPLY_SENDTOPIC_P:1}        
  topics:
    handler: ${SFS_HANDLER_TOPIC:dfsactions}
    profile: ${PROFILE_HANDLER_TOPIC:profilehandler}
    removerole: ${REMOVEROLE_HANDLER_TOPIC:removerolehandler}
    todevice: ${DEVICE_TOPIC:todevice}
    presence: ${PRESENCE_TOPIC:presenceUpdates}
    location: ${LOCATION_TOPIC:locationUpdates}
    deviceUpdates: ${KAFKA_TOPIC_DEVICE:deviceUpdates}

    # When login and logout events are validated, this information will be propagated to the system through these
    # topics. A.t.m. the query service's deviceStreamApp listens to these topics, to update the device information,
    # which in place is used by the admin service.
    loginUpdates: ${LOGIN_TOPIC:loginUpdates}
    logoutUpdates: ${LOGOUT_TOPIC:logoutUpdates}



#Argon2
ITERATIONS: 2
MEMORY: 16
PARALLELISM: 1
