_optimizedCalculateNormal

// Original slower logic.
        this._cache_rotation.set(this._mouse_angle_vertical, this._mouse_angle_horizontal, 0);
        this._cache_normal = this._cache_normal.set(0, 0, -1).applyEuler(this._cache_rotation);
        this._cache_walking_normal.set(this._cache_normal.x, 0, this._cache_normal.z).normalize();
        this._cache_left_right.set(this._cache_walking_normal.x, 0, this._cache_walking_normal.z).cross(this._MATH_UP_VECTOR).normalize();
        //l(this._cache_normal.x + ',' + this._cache_normal.y + ',' + this._cache_normal.z);
        //l(this._cache_walking_normal.x + ',' + this._cache_walking_normal.y + ',' + this._cache_walking_normal.z);
        //l(this._cache_left_right.x + ',' + this._cache_left_right.y + ',' + this._cache_left_right.z);



        // c1 - a
        // c2 - b
        // s1 - c
        // s2 - d

        /*let x = s1 * c2;
        let y = c1 * s2;
        let z = -s1 * s2;
        let w = c1 * c2;
        this._cache_normal.set(
            -y * w + z * -x -x * z -w * y,
            x * w + z * -y + w * x -y * z,
            -w * w + z * -z + y * y + x * x
        );*/


        let db = s2 * c2;
        let ac = c1 * s1;



                //let ax = this._cache_walking_normal.x;
        //let az = this._cache_walking_normal.z;

        //let vx = -az;
        //let vz = ax;

        //let nn = Math.sqrt(az * az + ax * ax);
        //let scalar2 = 1.0 / nn;
        //this._cache_left_right.set(vx * scalar2, 0, vz * scalar2);
        //this._cache_left_right.set(-az * scalar2, 0, ax * scalar2);
